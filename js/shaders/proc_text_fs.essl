shaderSource[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;

	varying lowp vec4 vColor;
	varying vec2 texCoord;
	varying vec3 worldPosition;

	uniform sampler2D colorTexture;	



	uniform float shininess;

	uniform vec4 lightPos[2];
	uniform vec4 lightPowerDensity[2];


	uniform vec3 eye;

	varying vec3 worldNormal;

	void main(void) {

	   vec3 rgb = vec3(0, 0, 0);

	   //float shininess = 15.0;

	   vec3 textureColor = vec3(texture2D(colorTexture, texCoord));

	    for(int i = 0; i < 2; i++) {
	   	  vec3 l = lightPos[0].xyz - worldPosition;  
	   	  vec3 view = normalize(eye - worldPosition);
	   	  float squared = dot(l, l);
	   	  
	  	  //point
	   	  if(lightPos[i].w == 1.0) {
	   	       vec3 normL = normalize(l);
	     	   vec3 halfway = normalize(view + normL);
	   	       float cosine = dot(halfway, normalize(worldNormal)) / (length(halfway) * length(worldNormal));
	  	  	   cosine = pow(cosine, 2.0); 


	     	   rgb += max(cosine, 0.0) * (lightPowerDensity[i].xyz/squared); 
	   	  }
	   	  else {

	   	  	   vec3 normL = normalize(lightPos[i].xyz);
	           vec3 halfway = normalize(view + normL);

	  	  	   float cosineDir = pow(dot(halfway, normalize(worldNormal)), shininess); 

	           rgb += max(cosineDir, 0.0) * lightPowerDensity[i].xyz;
	           
	   	  }
	  }

		
		
		float sum = worldPosition.x + worldPosition.y + worldPosition.x;

		if (texCoord.x > 0.5) {
			float modColor = mod(sum, 2.0);

			if(modColor >= 1.0) {
				gl_FragColor = vec4(6, 90, 12, 1) * vec4(rgb.xyz, 1);
			}
			else {
				gl_FragColor = vec4(0, 23, 0, 1) * vec4(rgb.xyz, 1);
			}
		}

		else {
			vec3 textureColor = vec3(texture2D(colorTexture, texCoord));
			gl_FragColor = vec4(textureColor * rgb, 1);
		}

	}

  
`;